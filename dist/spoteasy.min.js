"use strict";const{createHash:e}=require("crypto");class SpotifyAPI{constructor({autoRefreshToken:e=!0}={}){Object.assign(this,arguments),this.token={}}authorizationCodeFlow(e,t,r,o={scope:[],show_dialog:!1}){let s=()=>{let r=createPostRequest({grant_type:"refresh_token",refresh_token:this.token.refresh_token,client_id:e,client_secret:t});return this.setToken(this.requestToken(r),s)};return this.token.resolve=o=>{let n=createPostRequest({grant_type:"authorization_code",code:o.code??o,redirect_uri:r,client_id:e,client_secret:t});return this.setToken(this.requestToken(n),s)},this.token.url=this.constructor.getAuthURL("code",e,r,o)}authorizationCodePKCEFlow(t,r,o={scope:[],show_dialog:!1}){let s=()=>{let e=createPostRequest({grant_type:"refresh_token",refresh_token:this.token.refresh_token,client_id:t});return this.setToken(this.requestToken(e),s)},n=generateRandomString(128),i=function t(r){let o=new TextEncoder,s=o.encode(r),n=e("sha256").update(s).digest("base64url");return n}(n);return o.code_challenge=i,this.token.resolve=e=>{let o=createPostRequest({grant_type:"authorization_code",code:e.code??e,redirect_uri:r,client_id:t,code_verifier:n});return this.setToken(this.requestToken(o),s)},this.token.url=this.constructor.getAuthURL("code",t,r,o)}clientCredentialsFlow(e,t){let r=()=>{this.clientCredentialsFlow(...arguments)},o=createPostRequest({grant_type:"client_credentials",client_id:e,client_secret:t});return this.setToken(this.requestToken(o),r)}implicitGrantFlow(e,t,r={scope:[],show_dialog:!1}){return this.token.resolve=this.setToken,this.token.url=this.constructor.getAuthURL("token",e,t,r)}static getAuthURL(e,t,r,{scope:o=[],show_dialog:s=!1,code_challenge:n}={}){let i={client_id:t,response_type:e,redirect_uri:r,state:generateRandomString(16),scope:o.join(" "),show_dialog:s};return n&&(i.code_challenge_method="S256",i.code_challenge=n),`https://accounts.spotify.com/authorize?${queryFromObject(i)}`}async requestToken(e){return fetch("https://accounts.spotify.com/api/token",e).then(e=>e.json())}async setToken(e,t){return this.token=Promise.resolve(e),this.token=await this.token,this.token={...this.token,expire_time:Date.now()+1e3*this.token.expires_in,get is_expired(){return Date.now()>this.expire_time},refresh:t},this.autoRefreshToken&&t&&setTimeout(()=>t(this.token),1e3*this.token.expires_in),this.token}async resolveToken(e){""!==objectFromQuery(e)[e]&&(e=objectFromQuery(e));try{return this.token.resolve(e)}catch{throw Error("Query is invalid")}}async refreshToken(){let e=this.token.access_token;try{await this.token.refresh()}catch{}if(e==this.token.access_token)throw Error("This token can't be refreshed");if("error"in this.token)throw Error(this.token.error_description);return this.token}async request({url:e,location:t="https://api.spotify.com/v1",endpoint:r,query:o={},method:s="GET",headers:n,body:i,parser:c}){if(void 0!==e){let{type:a,id:h}=this.constructor.parseURL(e);r=(({album:e=>`/albums/${e}`,artist:e=>`/artists/${e}`,audiobook:e=>`/audiobooks/${e}`,chapter:e=>`/chapters/${e}`,episode:e=>`/episodes/${e}`,playlist:e=>`/playlists/${e}`,show:e=>`/shows/${e}`,track:e=>`/tracks/${e}`,user:e=>`/users/${e}`})[a]?.(h)??"")+r}let u,l=await fetch(`${t}${r}?${queryFromObject(o)}`,{method:s,headers:{...n,Authorization:`Bearer ${this.token.access_token}`},body:i}).then(e=>e.json());if("error"in l)throw Error(l.error.message);return c?c(l):l}static parseURL(e){let t=new URL(e),r={hostname:t.hostname};switch(t.hostname){case"open.spotify.com":r.query=objectFromQuery(t.search),[r.type,r.id]=t.pathname.slice(1).split("/");break;case"api.spotify.com":r.query=objectFromQuery(t.search),"ids"in r.query?r.type=t.pathname.split("/").at(-1).slice(0,-1):([r.type,r.id]=t.pathname.split("/").slice(2),r.type=r.type.slice(0,-1));break;case"":[r.type,r.id]=t.pathname.split(":");break;default:throw Error("Invalid URL")}return r}}function generateRandomString(e){let t="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let o=0;o<e;o++)t+=r.charAt(Math.floor(Math.random()*r.length));return t}function createPostRequest(e){return{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:queryFromObject(e)}}function queryFromObject(e){return new URLSearchParams(e).toString()}function objectFromQuery(e){return Object.fromEntries(new URLSearchParams(e).entries())}module.exports=SpotifyAPI;